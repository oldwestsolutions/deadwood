// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  reputation    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  questions     Question[]
  answers       Answer[]
  votes         Vote[]
  comments      Comment[]
}

model Question {
  id          String    @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  answers     Answer[]
  votes       Vote[]
  comments    Comment[]
  tags        Tag[]
}

model Answer {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  String
  votes       Vote[]
  comments    Comment[]
  isAccepted  Boolean   @default(false)
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  question    Question? @relation(fields: [questionId], references: [id])
  questionId  String?
  answer      Answer?   @relation(fields: [answerId], references: [id])
  answerId    String?
}

model Vote {
  id          String    @id @default(cuid())
  value       Int       // 1 for upvote, -1 for downvote
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  question    Question? @relation(fields: [questionId], references: [id])
  questionId  String?
  answer      Answer?   @relation(fields: [answerId], references: [id])
  answerId    String?
  createdAt   DateTime  @default(now())

  @@unique([userId, questionId])
  @@unique([userId, answerId])
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  questions   Question[]
  createdAt   DateTime  @default(now())
}
